import jwt from 'jsonwebtoken';
import { AuthenticationToken } from '../models/AuthenticationToken'; // Adjust the import path as necessary

export class AuthenticationTokenService {
    private secretKey: string = process.env.JWT_SECRET_KEY || 'yourSecretKey'; // Ideally loaded from environment variables

    generateToken(UserID: number): AuthenticationToken {
        const payload = { UserID };
        const token = jwt.sign(payload, this.secretKey, { expiresIn: '1h' }); // Tokens expire in 1 hour

        // In a real application, you would save the token details to your database here
        const expiryDate = new Date(new Date().getTime() + 60 * 60 * 1000); // Setting expiry 1 hour from now

        // Placeholder TokenID, in a real scenario, this would be generated by the database
        const tokenID = Math.floor(Math.random() * 10000);

        return new AuthenticationToken(tokenID, UserID, token, expiryDate);
    }

    validateToken(Token: string): boolean {
        try {
            jwt.verify(Token, this.secretKey);
            return true;
        } catch (error) {
            // Log the error or handle it as needed
            return false;
        }
    }

    invalidateToken(TokenID: number): void {
        // Here you would mark the token as invalidated in your database
        // Since we're not implementing the database part right now, this is just a placeholder
        console.log(`Token with ID ${TokenID} would be invalidated here.`);
    }

    getTokenDetails(TokenID: number): AuthenticationToken | null {
        // You would fetch and return the token details from your database
        // This is a placeholder implementation
        console.warn('getTokenDetails functionality requires database implementation');
        return null; // Return null or throw an error based on your error handling strategy
    }
}
